// Code generated by MockGen. DO NOT EDIT.
// Source: weather.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	weather_monster "github.com/walez/weather-monster"
	reflect "reflect"
)

// MockWeatherService is a mock of WeatherService interface
type MockWeatherService struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherServiceMockRecorder
}

// MockWeatherServiceMockRecorder is the mock recorder for MockWeatherService
type MockWeatherServiceMockRecorder struct {
	mock *MockWeatherService
}

// NewMockWeatherService creates a new mock instance
func NewMockWeatherService(ctrl *gomock.Controller) *MockWeatherService {
	mock := &MockWeatherService{ctrl: ctrl}
	mock.recorder = &MockWeatherServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWeatherService) EXPECT() *MockWeatherServiceMockRecorder {
	return m.recorder
}

// FindCityByID mocks base method
func (m *MockWeatherService) FindCityByID(ctx context.Context, id int64) (*weather_monster.City, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCityByID", ctx, id)
	ret0, _ := ret[0].(*weather_monster.City)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCityByID indicates an expected call of FindCityByID
func (mr *MockWeatherServiceMockRecorder) FindCityByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCityByID", reflect.TypeOf((*MockWeatherService)(nil).FindCityByID), ctx, id)
}

// FindCityByName mocks base method
func (m *MockWeatherService) FindCityByName(ctx context.Context, name string) (*weather_monster.City, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCityByName", ctx, name)
	ret0, _ := ret[0].(*weather_monster.City)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCityByName indicates an expected call of FindCityByName
func (mr *MockWeatherServiceMockRecorder) FindCityByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCityByName", reflect.TypeOf((*MockWeatherService)(nil).FindCityByName), ctx, name)
}

// CreateCity mocks base method
func (m *MockWeatherService) CreateCity(ctx context.Context, city *weather_monster.City) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCity", ctx, city)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCity indicates an expected call of CreateCity
func (mr *MockWeatherServiceMockRecorder) CreateCity(ctx, city interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCity", reflect.TypeOf((*MockWeatherService)(nil).CreateCity), ctx, city)
}

// UpdateCity mocks base method
func (m *MockWeatherService) UpdateCity(ctx context.Context, city *weather_monster.City) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCity", ctx, city)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCity indicates an expected call of UpdateCity
func (mr *MockWeatherServiceMockRecorder) UpdateCity(ctx, city interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCity", reflect.TypeOf((*MockWeatherService)(nil).UpdateCity), ctx, city)
}

// DeleteCity mocks base method
func (m *MockWeatherService) DeleteCity(ctx context.Context, city *weather_monster.City) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCity", ctx, city)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCity indicates an expected call of DeleteCity
func (mr *MockWeatherServiceMockRecorder) DeleteCity(ctx, city interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCity", reflect.TypeOf((*MockWeatherService)(nil).DeleteCity), ctx, city)
}

// GetCityForecast mocks base method
func (m *MockWeatherService) GetCityForecast(ctx context.Context, cityID int64) (*weather_monster.Forecast, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCityForecast", ctx, cityID)
	ret0, _ := ret[0].(*weather_monster.Forecast)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCityForecast indicates an expected call of GetCityForecast
func (mr *MockWeatherServiceMockRecorder) GetCityForecast(ctx, cityID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCityForecast", reflect.TypeOf((*MockWeatherService)(nil).GetCityForecast), ctx, cityID)
}

// GetCityWebhooks mocks base method
func (m *MockWeatherService) GetCityWebhooks(ctx context.Context, cityID int64) ([]*weather_monster.Webhook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCityWebhooks", ctx, cityID)
	ret0, _ := ret[0].([]*weather_monster.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCityWebhooks indicates an expected call of GetCityWebhooks
func (mr *MockWeatherServiceMockRecorder) GetCityWebhooks(ctx, cityID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCityWebhooks", reflect.TypeOf((*MockWeatherService)(nil).GetCityWebhooks), ctx, cityID)
}

// CreateTemperature mocks base method
func (m *MockWeatherService) CreateTemperature(ctx context.Context, temperature *weather_monster.Temperature) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTemperature", ctx, temperature)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTemperature indicates an expected call of CreateTemperature
func (mr *MockWeatherServiceMockRecorder) CreateTemperature(ctx, temperature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemperature", reflect.TypeOf((*MockWeatherService)(nil).CreateTemperature), ctx, temperature)
}

// FindWebhookByID mocks base method
func (m *MockWeatherService) FindWebhookByID(ctx context.Context, id int64) (*weather_monster.Webhook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindWebhookByID", ctx, id)
	ret0, _ := ret[0].(*weather_monster.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindWebhookByID indicates an expected call of FindWebhookByID
func (mr *MockWeatherServiceMockRecorder) FindWebhookByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindWebhookByID", reflect.TypeOf((*MockWeatherService)(nil).FindWebhookByID), ctx, id)
}

// CreateWebhook mocks base method
func (m *MockWeatherService) CreateWebhook(ctx context.Context, webhook *weather_monster.Webhook) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWebhook", ctx, webhook)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWebhook indicates an expected call of CreateWebhook
func (mr *MockWeatherServiceMockRecorder) CreateWebhook(ctx, webhook interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebhook", reflect.TypeOf((*MockWeatherService)(nil).CreateWebhook), ctx, webhook)
}

// DeleteWebhook mocks base method
func (m *MockWeatherService) DeleteWebhook(ctx context.Context, webhook *weather_monster.Webhook) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWebhook", ctx, webhook)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWebhook indicates an expected call of DeleteWebhook
func (mr *MockWeatherServiceMockRecorder) DeleteWebhook(ctx, webhook interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebhook", reflect.TypeOf((*MockWeatherService)(nil).DeleteWebhook), ctx, webhook)
}
